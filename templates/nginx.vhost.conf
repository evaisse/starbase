

# this section is needed to proxy web-socket connections
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# HTTP
server {
    listen 80; # if this is not a default server, remove "default_server"
    server_name {{ domain }}; # the domain on which we want to host the application. Since we set "default_server" previously, nginx will answer all hosts anyway.

    # lets encrypt alias for host validation
    location /.well-known/acme-challenge {
        alias /var/www/letsencrypt/.well-known/acme-challenge;
    }

    {% if enable_ssl %}
    # redirect non-SSL to SSL
    location / {
        rewrite     ^ https://$server_name$request_uri? permanent;
    }
    {% endif %}
}

{% if enable_ssl %}
# HTTPS server
server {
    listen 443 ssl http2; # we enable SPDY here
    server_name {{ domain }}; # this domain must match Common Name (CN) in the SSL certificate

    root html; # irrelevant
    index index.html; # irrelevant

    # LOGS
    access_log /var/log/nginx/{{ domain }}.access.log;
    error_log /var/log/nginx/{{ domain }}.error.log error;

    # SSL certs
    ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem; # full path to SSL certificate and CA certificate concatenated together
    ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem; # full path to SSL key

    # performance enhancement for SSL
    ## Enables OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ## Enables all nginx worker processes share SSL session information
    ssl_session_cache shared:SSL:30m;
    ## Increases the amount of time SSL session information in the cache is valid
    ssl_session_timeout 30m;

    ## Improves TTFB by using a smaller SSL buffer than the nginx default
    ssl_buffer_size 8k;
    ## Specifies that server ciphers should be preferred over client ciphers
    # safety enhancement to SSL: make sure we actually use a safe cipher
    ssl_prefer_server_ciphers on;
    ## Use TLS instead of SSL - Compatibility issues with some Java clients 
    ## and older versions of of IE, however, more secure. 
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ## Use more secure and less CPU tasking ciphers compared to nginx defaults
    # Nginx for Modern Browsers
    # Grade A (A+ with HSTS at >= 6 Months)
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    # Google DNS, Open DNS, Dyn DNS
    resolver 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 216.146.35.35 216.146.36.36 valid=300s;
    resolver_timeout 3s;

    # @see https://weakdh.org/sysadmin.html
    # Use a Strong, Diffie Hellman Group. A few 1024-bit groups are used by millions of servers, 
    # which makes them an optimal target for precomputation, and potential eavesdropping. 
    # Administrators should use 2048-bit or stronger Diffie-Hellman groups with "safe" primes.
    ssl_dhparam /etc/nginx/dhparams.2048.pem;

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    add_header Strict-Transport-Security "max-age=31536000;";

    # If your application is not compatible with IE <= 10, this will redirect visitors to a page advising a browser update
    # This works because IE 11 does not present itself as MSIE anymore
    if ($http_user_agent ~ "MSIE" ) {
        return 303 https://browser-update.org/update.html;
    }
    
    # pass all requests to Meteor
    location / {
        proxy_pass http://127.0.0.1:{{ app_node_port }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade; # allow websockets
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header X-Forwarded-For $remote_addr; # preserve client IP

        # this setting allows the browser to cache the application in a way compatible with Meteor
        # on every applicaiton update the name of CSS and JS file is different, so they can be cache infinitely (here: 30 days)
        # the root path (/) MUST NOT be cached
        if ($uri != '/') {
            expires 30d;
        }
    }
}
{% endif %}